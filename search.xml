<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[webpack1.0初探]]></title>
      <url>http://djl.pub/2017/02/07/webpack1.0%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<p>webpack是目前最热门的前端资源模块化管理和打包工具,它能把各种资源，包括 jxs、coffeeJS、less／sass，甚至图片，当作模块来加载和使用。当我们需要使用这些资源时只需要require进来，方便模块化开发。<br><a id="more"></a></p>
<h1 id="webpack-使用"><a href="#webpack-使用" class="headerlink" title="webpack 使用"></a><a href="https://webpack.github.io/docs/usage.html" target="_blank" rel="external">webpack 使用</a></h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先全局安装<code>webpack $npm install webpack -g</code></p>
<p>再安装<code>webpack-dev-server</code>这是一个webpack提供的静态开发环境服务器，用来开发调试</p>
<blockquote>
<p>注：如果是在开发环境中用到的包我们使用<code>--save-dev</code>的参数，如果生产环境用到的如jQuery，我们直接只用<code>save</code>参数</p>
</blockquote>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>使用webpack最重要的就是配置文件<code>webpack.config.js</code>，和gulp等等工具一样都有一个配置文件</p>
<h2 id="常用配置选项"><a href="#常用配置选项" class="headerlink" title="常用配置选项"></a>常用配置选项</h2><h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">entry : &#123;</div><div class="line">    <span class="string">'admin'</span>: <span class="string">'./admin/admin.js'</span>,</div><div class="line">    <span class="string">'custom'</span>:<span class="string">'./custom/custom.js'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>entry表示webpack的入口文件，可以是多个，那么webpack会一次执行。</p>
<h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">output:&#123;</div><div class="line">    <span class="attr">filename</span>:<span class="string">"[name].bundle.js"</span>,</div><div class="line">    <span class="attr">path</span>:path.join(__dirname,<span class="string">'dist'</span>),</div><div class="line">    <span class="attr">publicPath</span>:<span class="string">'/dist/'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>filename</code>编译后输出文件的名字<br><code>path</code>:编译后文件的存储位置</p>
<h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins: []"></a>plugins: []</h3><h4 id="UglifyJsPlugin"><a href="#UglifyJsPlugin" class="headerlink" title="UglifyJsPlugin"></a>UglifyJsPlugin</h4><p>代码压缩 UglifyJsPlugin。这是一个webpack内置的插件，我们在使用时，只需要在webpack.config.js 引入，然后在plugins选项中注册</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="attr">plugins</span>:[<span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">             <span class="attr">compress</span>: &#123;</div><div class="line">                 <span class="attr">warnings</span>: <span class="literal">false</span></div><div class="line">             &#125;</div><div class="line">         &#125;)]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>他会将所有的js文件进行压缩，但是我们只希望生成环境的代码压缩，开发环境的文件并不希望压缩</p>
<p>如果我们只想在build时候uglify,那么我们可以设置一个参数，在build的启动项中，然后利用第三方包<code>node-argv</code>去读这个参数，然后就可以通过if来进行判断。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> args = <span class="built_in">require</span>(<span class="string">'node-argv'</span>);</div><div class="line"><span class="keyword">if</span>(args.minify)&#123;<span class="comment">// 这个minify就是自己设置的参数</span></div><div class="line">    <span class="comment">// toDo ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有一种是读取环境变量的方式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack.config.js</span></div><div class="line"><span class="keyword">var</span> env = process.env.NODE_ENV;</div><div class="line"><span class="keyword">if</span>(env === <span class="string">'production'</span>)&#123;</div><div class="line">    <span class="comment">// toDo</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"NODE_ENV=dev webpack-dev-server --progress --colors --hot --inline --d"</span>,</div><div class="line">    <span class="attr">"bulid"</span>: <span class="string">"NODE_ENV=producrion webpack-dev-server --progress --colors --hot --inline --d"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"></div><div class="line"><span class="comment">// definePlugin 会把定义的string 变量插入到Js代码中。</span></div><div class="line"><span class="keyword">var</span> definePlugin = <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">  <span class="attr">__DEV__</span>: <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(process.env.BUILD_DEV || <span class="string">'true'</span>)),</div><div class="line">  <span class="attr">__PRERELEASE__</span>: <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(process.env.BUILD_PRERELEASE || <span class="string">'false'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./main.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [definePlugin]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>配置完成后，就可以使用 <code>BUILD_DEV=1 BUILD_PRERELEASE=1</code> webpack来打包代码了。 值得注意的是，<code>webpack -p</code>会删除所有无作用代码，也就是说那些包裹在这些全局变量下的代码块都会被删除，这样就能保证这些代码不会因发布上线而泄露。</p>
<h4 id="Open-Browser-Webpack-Plugin"><a href="#Open-Browser-Webpack-Plugin" class="headerlink" title="Open Browser Webpack Plugin"></a><a href="https://github.com/baldore/open-browser-webpack-plugin" target="_blank" rel="external">Open Browser Webpack Plugin</a></h4><p>使用<br><code>npm i --save-dev open-browser-webpack-plugin</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> OpenBrowserPlugin = <span class="built_in">require</span>(<span class="string">'open-browser-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: path.resolve(__dirname, <span class="string">'lib/entry.js'</span>),</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: __dirname + <span class="string">"/bundle/"</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">"bundle.js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> OpenBrowserPlugin(&#123; <span class="attr">url</span>: <span class="string">'http://localhost:3000'</span> &#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>详细配置请见<a href="https://github.com/baldore/open-browser-webpack-plugin" target="_blank" rel="external">官网</a></p>
<h2 id="loaders"><a href="#loaders" class="headerlink" title="loaders"></a>loaders</h2><p><a href="https://webpack.github.io/docs/list-of-loaders.html" target="_blank" rel="external">loader lists</a></p>
<h4 id="css-样式文件"><a href="#css-样式文件" class="headerlink" title="css 样式文件"></a>css 样式文件</h4><p> css-loader的作用是将css文件写入一个js文件里面</p>
<p> style-loader的作用就是将这个转换后的样式文件解析插入到HTML中</p>
<p> loader 有两种配置方法，一种是给每个entry文件单独添加loader例如<code>require(&#39;style!css!./admin.css&#39;);</code>注意在这里每一个loader后面都有一个”!”。这个顺序是<em>从右往左</em>的<br>另一种方式是在webpack.config.js文件中整体配置使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="built_in">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [&#123;</div><div class="line">            <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</div><div class="line">            <span class="attr">loaders</span>:[<span class="string">'style'</span>,<span class="string">'css'</span>]</div><div class="line">        &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>统一使用loaders:[]数组的方式</p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>对于引用图片有两种引用模式，一种是直接require，另一种是转换成base64（一般针对小图标）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">loaders: [</div><div class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.(png|jpg)$/</span>, <span class="attr">loader</span>: <span class="string">'file-loader'</span>&#125;,</div><div class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.(png|jpg)$/</span>, <span class="attr">loader</span>: <span class="string">'url-loader?limit=8192'</span>&#125; <span class="comment">// 内联的base64的图片地址，图片要小于8k，直接的url的地址则不解析</span></div><div class="line">    ]</div></pre></td></tr></table></figure></p>
<h4 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h4><p>node-sass模块和sass-loader。<br><a href="https://github.com/jtangelder/sass-loader" target="_blank" rel="external">参考资料</a></p>
<h4 id="ES6-加载"><a href="#ES6-加载" class="headerlink" title="ES6 加载"></a>ES6 加载</h4><p>这个依赖了3个模块<code>Babel-loader加载器</code>、<code>babel-preset-es2015</code>、<code>babel-core</code>。当然<br>如果是在react中使用还要依赖<code>babel-preset-react</code>。两种方式使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">  <span class="attr">loaders</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">test</span>: <span class="regexp">/\.js?$/</span>,</div><div class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">      <span class="attr">loader</span>: <span class="string">'babel'</span>,</div><div class="line">      <span class="attr">query</span>: &#123;</div><div class="line">        <span class="attr">presets</span>: [<span class="string">'es2015'</span>]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">   <span class="attr">loaders</span>:[</div><div class="line">     &#123;</div><div class="line">       <span class="attr">test</span>: <span class="regexp">/\.js[x]?$/</span>,</div><div class="line">       <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">       <span class="attr">loader</span>: <span class="string">'babel-loader?presets[]=es2015'</span></div><div class="line">     &#125;,</div><div class="line">   ]</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p><em>NOTE:The query string is appended to the loader with ?. i.e. url-loader?mimetype=image/png.</em></p>
<p>当然也可以配置一个.babelrc的配置文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"presets"</span>: [ <span class="string">"es2015"</span> ] &#125;</div></pre></td></tr></table></figure></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>我们可以直接通过webpack-dev-server（前提是全局安装）命令直接在命令窗口中启动，也可以通过设置package.json<br>一个启动项，例如：<code>&quot;start&quot;: &quot;webpack-dev-server --progress --colors --hot --inline&quot;</code>这里就不需要webpack-dev-server<br>这个包是全局安装。这种启动方式，寻找包会到local环境中查找，找不到再去查找全局。</p>
<p><code>--progress</code>这个参数是显示进度</p>
<p><code>--colors</code> 显示颜色，这样命令窗口看起来比较爽</p>
<p><code>--hot</code> 启动热加载，就是文件保存，浏览器自动刷新，类似于liveonload这个功能</p>
<p><code>--inline</code> 把内容注入到相应文件中</p>
<p><code>--d</code> 开启debug模式，这样在浏览器中我们就可以看到源码</p>
<p>在entry的js文件里面可以require任何一个文件(css,js等等)</p>
<h3 id="resolve-配置选项"><a href="#resolve-配置选项" class="headerlink" title="resolve 配置选项"></a>resolve 配置选项</h3><p>如果你希望在require文件时省略文件的扩展名，只需要在webpack.config.js中添加 resolve.extensions 来配置。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">  <span class="comment">// 现在你require文件的时候可以直接使用require('file')，不用使用require('file.coffee')</span></div><div class="line">  extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.coffee'</span>]  <span class="comment">// 但是必须要在前面加一个空的字符串，否则会导致无法加载的情况</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="优化通用代码"><a href="#优化通用代码" class="headerlink" title="优化通用代码"></a>优化通用代码</h3><p>Feed和Profile页面存在大量通用代码(比如React、公共的样式和组件等等)。webpack可以抽离页面间公共的代码，生成一个公共的bundle文件，供这两个页面缓存使用:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> commonsPlugin =</div><div class="line">  <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>); <span class="comment">// 引入插件</span></div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">Profile</span>: <span class="string">'./profile.js'</span>,</div><div class="line">    <span class="attr">Feed</span>: <span class="string">'./feed.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'build'</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].js'</span> <span class="comment">// 为上面entry的key值</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [commonsPlugin]</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在上一步引入自己的bundle之前引入<script src="build/common.js"></script></p>
<h2 id="生成Source-Maps（使调试更容易）"><a href="#生成Source-Maps（使调试更容易）" class="headerlink" title="生成Source Maps（使调试更容易）"></a>生成Source Maps（使调试更容易）</h2><p>开发总是离不开调试，如果可以更加方便的调试当然就能提高开发效率，<br>不过打包后的文件有时候你是不容易找到出错了的地方对应的源代码的位置的，Source Maps就是来帮我们解决这个问题的。<br>通过简单的配置后，Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，<br>使得编译后的代码可读性更高，也更容易调试。</p>
<p>在webpack的配置文件中配置source maps，需要配置devtool，<br>它有以下四种不同的配置选项，各具优缺点，描述如下：</p>
<p>devtool选项   配置结果</p>
<p><code>source-map</code>     在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度；</p>
<p><code>cheap-module-source-map</code>   在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；</p>
<p><code>eval-source-map</code>   使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项；</p>
<p><code>cheap-module-eval-source-map</code>  这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点；</p>
<p>正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的构建速度的后果就是对打包后的文件的的执行有一定影响。</p>
<p>在学习阶段以及在小到中性的项目上，eval-source-map是一个很好的选项，不过记得只在开发阶段使用它，继续上面的例子，进行如下配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  devtool: &apos;eval-source-map&apos;,//配置生成Source Maps，选择合适的选项</div><div class="line">  entry:  __dirname + &quot;/app/main.js&quot;,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + &quot;/public&quot;,</div><div class="line">    filename: &quot;bundle.js&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>cheap-module-eval-source-map</code>方法构建速度更快，但是不利于调试，推荐在大型项目考虑da时间成本是使用。</p>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>1  视频老师用的是mac系统，正则匹配文件路径时这样<code>/\/images\//</code>，但是我的是Windows的系统所以文件路径匹配应该是这样<code>/\\img\\/</code></p>
<p>2 在webpack.config.js配置文件中，应该是不能使用ES6的语法的。</p>
<h1 id="不错的webpack资料"><a href="#不错的webpack资料" class="headerlink" title="不错的webpack资料"></a>不错的webpack资料</h1><p><a href="https://github.com/petehunt/webpack-howto/blob/master/README-zh.md" target="_blank" rel="external">webpack-howto</a></p>
<p><a href="http://www.maiziedu.com/course/570/" target="_blank" rel="external">视频资料</a></p>
<p><a href="https://segmentfault.com/a/1190000008032524" target="_blank" rel="external">webpack 入门实战</a></p>
<p><a href="https://github.com/ruanyf/webpack-demos" target="_blank" rel="external">阮一峰老师webpack</a></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>感觉这篇写的并不是很好，然而webpack2.0出来了，我1.0才开始，嗯对Vue似乎也是这样。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vuex初探]]></title>
      <url>http://djl.pub/2017/01/29/Vuex%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<p>前篇我们谈到在<a href="http://djl.pub/2017/01/21/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BB%84%E4%BB%B6/#组件通信">Vue组件中进行通信的几种方式</a>，父子组件中可以通过props属性，兄弟组件可以通过事件分发。当然很明显组件的独立性会有所降低，那么这里有另外一种方式就是通过Vuex。核心思想就是把子组件中需要共享的数据通过Vuex来进行管理。这里我使用的是Vuex1.0版本。<br><a id="more"></a></p>
<p><a href="https://github.com/vuejs/vuex/tree/1.0/docs/zh-cn" target="_blank" rel="external">官方文档1.0</a></p>
<p>Vuex 1.0 和 2.0都完全支持 Vue 1.0 和 2.0。上面是1.0版本的文档，千万不要安装的2.0版本，查看的却是1.0的文档资料</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vuex@1.0.0</div></pre></td></tr></table></figure>
<p>这里我们以一个例子来讲解Vuex的基本使用。我们实现一个计数器，实现加一和减一功能。这里我们创建3个组件<code>Display.vue</code>、<code>Increment.vue</code>和<code>Decrement.vue</code>。很简单我们可以分析出这三个组件中会共享一个数据那就是<code>count</code>，都需要知道当前计数器的数值是多少。所以这个数据要放在Vuex中进行管理，以后<code>Display.vue</code>、<code>Increment.vue</code>和<code>Decrement.vue</code>这三个组件就是通过访问Vuex来操作<code>count</code>这个数据。</p>
<h2 id="Vuex基本流程"><a href="#Vuex基本流程" class="headerlink" title="Vuex基本流程"></a>Vuex基本流程</h2><p>在这里首先借用官方文档中的一幅图片</p>
<p><img src="http://ok3x4ia9b.bkt.clouddn.com/17-1-29/63997298-file_1485700766566_d0e.png" alt="Vuex流程图"></p>
<p>从这里我们会知道一下几个核心概念</p>
<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>在使用Vuex时，我们一般会有如下文件结构：</p>
<p><img src="http://ok3x4ia9b.bkt.clouddn.com/17-1-29/92859228-file_1485701346600_9217.jpg" alt="Vuex基本文件结构"></p>
<h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>state对象保存的就是共享数据的当前状态</p>
<h3 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h3><p>提供操作共享数据的具体方法，能够直接操作state对象。</p>
<h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><p>在vue组件中，我们可以直接通过this.$store来访问共享数据，但是我们一般不会这么做，我们还是通过Vuex提供的getter属性来取得。</p>
<h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><blockquote>
<p>action 是一种专门用来被 component 调用的函数。action 函数能够通过分发相应的 mutation 函数，来触发对 store 的更新。action 也可以先从 HTTP 后端或 store 中读取其他数据之后再分发更新事件。</p>
</blockquote>
<p>actions不能直接操作state数据的，而是通过dispatch相应的mutations来实现。一般组件直接调用的就是actions中提供的函数接口，而不会去直接调用mutations。</p>
<p><img src="http://ok3x4ia9b.bkt.clouddn.com/17-1-29/32989864-file_1485700769110_11d56.jpg" alt=""></p>
<p>上图是我自己画的一个调用关系图，从上面我们可以看到，调用过程还是比较复杂的，所以如果是比较小的项目，就不要使用Vuex了。</p>
<h2 id="开始动手吧"><a href="#开始动手吧" class="headerlink" title="开始动手吧"></a>开始动手吧</h2><p>首先我们通过vue-cli脚手架搭建一个vue工程，如果不是很清楚可以看看我的另一篇博客。然后我们构建<code>Display.vue</code>、<code>Increment.vue</code>和<code>Decrement.vue</code>三个组件。然后新建一个vuex文件夹下面有<code>store.js</code>、<code>actions.js</code>和<code>getters.js</code>。工程目录结构如下图所示。</p>
<p><img src="http://ok3x4ia9b.bkt.clouddn.com/17-1-29/90277051-file_1485702257444_17c2d.jpg" alt="计数器工程目录结构"></p>
<h3 id="store-js"><a href="#store-js" class="headerlink" title="store.js"></a>store.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line"><span class="comment">//告诉Vue使用vuex</span></div><div class="line">Vue.use(Vuex);</div><div class="line"></div><div class="line"><span class="comment">//创建一个对象来保存应用启动时的初始状态</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line"><span class="comment">// 应用启动时，count为0</span></div><div class="line">    count: <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建一个对象存储一系列我们接下来要写的mutation函数</span></div><div class="line"><span class="keyword">const</span> mutations = &#123;</div><div class="line"><span class="comment">//    放置我们状态变更函数</span></div><div class="line">    INCREMENT (state,amount) &#123;</div><div class="line">         state.count = state.count + amount;</div><div class="line">    &#125;,</div><div class="line">    DECREMENT (state,amount) &#123;</div><div class="line">        state.count = state.count - amount;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//整合初始状态和变更函数，我们就得到了我们所需的store</span></div><div class="line"><span class="comment">// 至此，这个store就可以连接到我们的应用中</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">    state,</div><div class="line">    mutations</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>简单来说这个文件就做了几件事<br>1 告诉vue我们这个项目使用了vuex<br>2 定义添加共享数据count<br>3 提供操作共享数据的相关函数接口<code>INCREMENT</code>、<code>DECREMENT</code><br>4 导出这个store供外部使用</p>
<h3 id="actions-js"><a href="#actions-js" class="headerlink" title="actions.js"></a>actions.js</h3><p>action 是一种专门用来被 component 调用的函数。也就是说<code>Display.vue</code>、<code>Increment.vue</code>和<code>Decrement.vue</code>三个组件可能要使用actions.js。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> incrementCounter = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;dispatch, state&#125;</span>) </span>&#123;</div><div class="line">     dispatch(<span class="string">'INCREMENT'</span>,<span class="number">1</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> decrementCounter = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;dispatch, state&#125;</span>) </span>&#123;</div><div class="line">    dispatch(<span class="string">'DECREMENT'</span>,<span class="number">1</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>dispatch中的字符串参数一定要和store.js中mutations对象中的名字对应</strong><br>这里我们可以通过dispatch给对应mutations中的函数提供参数，这里就是<code>1</code>。</p>
<h3 id="Increment-vue"><a href="#Increment-vue" class="headerlink" title="Increment.vue"></a>Increment.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'increment'</span>&gt;</span>Increment +1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">import</span> &#123; incrementCounter &#125; <span class="keyword">from</span> <span class="string">'../vuex/action'</span></div><div class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">        <span class="attr">vuex</span>:&#123;</div><div class="line">            <span class="attr">actions</span>:&#123;</div><div class="line">                <span class="attr">increment</span>:incrementCounter</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当我们点击按钮时，会触发click事件调用<code>increment</code>方法，从而调用<code>incrementCounter</code>这个action，通过这个action调用直接操作数据的mutation。于是就这样实现了加一操作。</p>
<h3 id="Display-vue"><a href="#Display-vue" class="headerlink" title="Display.vue"></a>Display.vue</h3><p>接下来就是通过Display.vue这个组件来显示</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;counterValue&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">import</span> &#123; getCount &#125; <span class="keyword">from</span> <span class="string">'../vuex/getters'</span></div><div class="line">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">        <span class="attr">vuex</span>:&#123;</div><div class="line">          <span class="attr">getters</span>:&#123;</div><div class="line">            <span class="attr">counterValue</span>:getCount</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们可以看到并没有直接这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">vuex:&#123;</div><div class="line">  <span class="attr">getters</span>:&#123;</div><div class="line">    counterValue (state) &#123;</div><div class="line">     <span class="keyword">return</span> state.count</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>1 我们可能需要使用 getter 函数返回需经过计算的值（比如总数，平均值等）。<br>2 在大型应用里，很多组件之间可以复用同一个 getter 函数。<br>3 如果这个值的位置改变了（比如从 store.count 变成了 store.counter.value），你只需要改一个 getter 方法，而不是一堆组件。</p>
</blockquote>
<h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Increment</span>&gt;</span><span class="tag">&lt;/<span class="name">Increment</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Decrement</span>&gt;</span><span class="tag">&lt;/<span class="name">Decrement</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Display</span>&gt;</span><span class="tag">&lt;/<span class="name">Display</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> Increment <span class="keyword">from</span> <span class="string">'./components/Increment'</span></div><div class="line"><span class="keyword">import</span> Decrement <span class="keyword">from</span> <span class="string">'./components/Decrement'</span></div><div class="line"><span class="keyword">import</span> Display <span class="keyword">from</span> <span class="string">'./components/Display'</span></div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./vuex/store'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">components</span>: &#123;</div><div class="line">    Increment,</div><div class="line">    Decrement,</div><div class="line">    Display</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">store</span>:store</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里没有什么好特别说明，就是一般我们在根组件中注入store，这样我们在每个组件中都可以访问。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上只实现了加一的功能，减一的功能类似，大家可以自己下来试试，如果觉得这个太容易，可以试一试这个<a href="https://segmentfault.com/a/1190000005015164#articleHeader5" target="_blank" rel="external">应用笔记项目</a>。</p>
<p>大年初二，23:30分。。。。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue学习之组件]]></title>
      <url>http://djl.pub/2017/01/21/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>组件在Vue中占有举足轻重的地位，在开发<em>高仿饿了么外卖APP</em>中也见识到了组件化开发的便捷和灵活。下面来总结一下。<br><a id="more"></a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://v1-cn.vuejs.org/guide/components.html" target="_blank" rel="external">官方Vue组件文档</a><br><a href="http://www.cnblogs.com/keepfool/p/5625583.html" target="_blank" rel="external">Vue.js——60分钟组件快速入门（上篇）</a><br><a href="http://www.cnblogs.com/keepfool/p/5637834.html" target="_blank" rel="external">Vue.js——60分钟组件快速入门（下篇）</a></p>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义</span></div><div class="line"><span class="keyword">var</span> MyComponent = Vue.extend(&#123;</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 注册</span></div><div class="line">Vue.component(<span class="string">'my-component'</span>, MyComponent)</div><div class="line"><span class="comment">// 创建根实例</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#example'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这个组件是全局注册。</p>
<h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><p>有时我们需要在一个父组件下面注册另一个子组件，而这个子组件只能被这个父组件使用，那么我们就需要使用局部注册。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Child = Vue.extend(&#123; <span class="comment">/* ... */</span> &#125;)</div><div class="line"><span class="keyword">var</span> Parent = Vue.extend(&#123;</div><div class="line">  <span class="attr">template</span>: <span class="string">'...'</span>,</div><div class="line">  <span class="attr">components</span>: &#123;</div><div class="line">    <span class="comment">// &lt;my-component&gt; 只能用在父组件模板内</span></div><div class="line">    <span class="string">'my-component'</span>: Child</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>可以看到就是在一个父组件中的<strong>components</strong>属性中添加子组件。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>在子组件中data属性值是一个匿名函数的返回值</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> MyComponent = Vue.extend(&#123;</div><div class="line">  <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>如果不这样，那么每个实例都将共享这一个data，就会造成混乱。</p>
<ol>
<li>我们在子组件模板时，既可以以下面这种方式指定</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyComponent = Vue.extend(&#123;</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>但是我们更推荐使用H5的template标签来做，尤其是在子组件模板比较大的时候<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmpl"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>这是一个组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> component = Vue.extend(&#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">"#tmpl"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>当然对子组件模板也有一些要求，不然会解析出错</p>
<blockquote>
<ul>
<li>a 不能包含其它的交互元素（如按钮，链接）</li>
<li>ul 和 ol 只能直接包含 li</li>
<li>select 只能包含 option 和 optgroup</li>
<li>table 只能直接包含 thead, tbody, tfoot, tr, caption, col,   colgroup</li>
<li>tr 只能直接包含 th 和 td </li>
</ul>
</blockquote>
<p> <a href="http://v1-cn.vuejs.org/guide/components.html#模板解析" target="_blank" rel="external">更多模板注意事项</a></p>
<h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><p>组件使用中最难的就是解决通信问题。一般有一下几种方式和情况</p>
<h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>第一种就是在子组件中利用props属性，来实现父子组件中的通信。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tmlp-a</span> <span class="attr">:props-num</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;/<span class="name">tmlp-a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmlp-a"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;propsNum&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'tmlp-a'</span>,&#123;</div><div class="line">    <span class="attr">template</span>:<span class="string">"#tmlp-a"</span>,</div><div class="line">    <span class="attr">props</span>:[<span class="string">'propsNum'</span>],</div><div class="line">    <span class="attr">methods</span>:&#123;</div><div class="line">        <span class="attr">add</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.propsNum++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>:<span class="string">"#wrap"</span>,</div><div class="line">    <span class="attr">data</span>:&#123;</div><div class="line">        <span class="attr">num</span>:<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>通过props这个属性我们就可以拿到父组件的data数据，然后我们就可以操作这个数据，但是这里是一个单项问题，即我们在子组件中操作这个数据，并不会影响父组件中对应的数据，当然有一个办法就是通过props传递过来的是一个引用类型数据而不是一个基本变量，但是这无疑很麻烦。那么Vue提供了另外一种方法，那就是通过<strong>.sync</strong>修饰符来做。把代码做一点修改即可：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tmlp-a</span> <span class="attr">:props-num.sync</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;/<span class="name">tmlp-a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Vue-dispatch"><a href="#Vue-dispatch" class="headerlink" title="Vue.$dispatch"></a>Vue.$dispatch</h3><p>第二种方式就是使用Vue.$dispatch（事件配发）来做，这种用法主要用在两个平级的子组件之间，它们有共同的父组件。也就是来解决兄弟组件间的通信问题，因为在一般情况下是不直接通信的（为了组件的独立性），那么有时候我们又有这样的需求。首先来看看通信的流程图：</p>
<p><img src="http://ok3x4ia9b.bkt.clouddn.com/17-1-21/79403842-file_1485003651843_8299.jpg" alt="dispatch原理图"></p>
<p>上面的通信方式，就如下面的对话。</p>
<blockquote>
<p>大儿子小明：老爸，让弟弟帮我拿一下快递，快递号码为（3737） //派发事件并传递参数3737<br>老爸听到了大儿子的请求，并开始行动 //父组件事件响应函数做出响应<br>老爸跑去找小儿子小明 //v-ref指令找到另一个子组件<br>爸爸：小华，快去拿一个快递，快递号码为（3737）<br>小儿子小明腾腾腾就去拿快递，告诉别人快递号码。</p>
</blockquote>
<p>代码示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">child-a</span> &gt;</span><span class="tag">&lt;/<span class="name">child-a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">child-b</span>  <span class="attr">v-ref:other-child</span>&gt;</span><span class="tag">&lt;/<span class="name">child-b</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"child-a"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sendMsg"</span>&gt;</span>发送信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"child-b"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;receiveMsg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#container'</span>,</div><div class="line">    <span class="attr">components</span>: &#123;</div><div class="line">        <span class="string">'childA'</span>: &#123;</div><div class="line">            <span class="attr">template</span>: <span class="string">'#child-a'</span>,</div><div class="line">            <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    <span class="attr">msg</span>:<span class="string">'DJL箫氏'</span></div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">methods</span>: &#123;</div><div class="line">                <span class="attr">sendMsg</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">this</span>.$dispatch(<span class="string">'fatherTodo'</span>,<span class="keyword">this</span>.msg);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'childB'</span>: &#123;</div><div class="line">            <span class="attr">template</span>: <span class="string">'#child-b'</span>,</div><div class="line">            <span class="attr">data</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">              <span class="keyword">return</span> &#123;</div><div class="line">                  <span class="attr">receiveMsg</span>:<span class="string">''</span></div><div class="line">              &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">methods</span>: &#123;</div><div class="line">                <span class="attr">receiveMsgFromA</span>: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">                    <span class="keyword">this</span>.receiveMsg = msg;</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">'我接受到来自A的数据：'</span>+msg);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">events</span>: &#123;</div><div class="line">        <span class="attr">fatherTodo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.$refs.childB.receiveMsgFromA(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这样就可以在兄弟组件实现通信</p>
<h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><p>最后一种方式就是利用<a href="https://github.com/vuejs/vuex/tree/1.0/docs/zh-cn" target="_blank" rel="external">Vuex</a>,关于这种方法，我会专门花一篇来写，敬请期待。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue学习之生命周期]]></title>
      <url>http://djl.pub/2017/01/21/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<p>生命周期在组件开发总非常重要，尤其是能在适当的时机取得数据,做一些初始化准备。下面我们来简单的聊聊Vue生命周期。<br><a id="more"></a><br>这里首先来看看Vue官方文档给出的生命周期示意图。</p>
<p><img src="http://ok3x4ia9b.bkt.clouddn.com/17-1-21/75404643-file_1484986273994_1820a.png" alt="Vue生命周期"></p>
<p>在这里我主要讨论init、created、beforeCompile、compiled、ready、beforeDestroy、destroyed这几个生命周期钩子函数。</p>
<p>init：在实例开始初始化时同步调用。此时数据观测、事件和 watcher 都尚未初始化。也是说在这里this.$el和this.$data都是拿不到的。</p>
<p>created:在实例创建之后同步调用。此时实例已经结束解析选项，这意味着已建立：数据绑定，计算属性，方法，watcher/事件回调。但是还没有开始 DOM 编译，$el还不存在。也就是在这里已经可以访问this.$data了了。但是此时还没有进行模板编译。</p>
<p>beforeCompile：编译模板前，$el已经存在了。</p>
<p>compiled：模板编译完成，此时Vue指令已经生效，但是不能保证此时已经插入到文档中。</p>
<p>ready：在编译结束后和$el第一次插入到文档中的时候。这时可以从整个文档中获取到模板中的元素。</p>
<p>beforeDestroy：在销毁实例时调用，所有功能都还保持。</p>
<p>destroyed：在实例被销毁之后调用。此时所有的绑定和实例的指令已经解绑，所有的子实例也已经被销毁。如果有离开过渡，destroyed 钩子在过渡完成之后调用。与挂载元素解除绑定</p>
<p>代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'-----init----'</span>)</div><div class="line">    <span class="comment">//  也就是说在这里$el获取不到，数据观测也没有建立，事件绑定等等都没有完成  实例初始化时同步调用</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data.msg);</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</div><div class="line">&#125;,</div><div class="line"><span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 这里$el依然获取不到，但是数据观测已经建立，也就是说可以获得数据了，但是依然没有开始编译，也就是说Vue</span></div><div class="line">    <span class="comment">// 的一些指令是不起作用的</span></div><div class="line">    <span class="comment">// 实例创建后同步调用</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'----created---'</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data.msg);</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</div><div class="line">&#125;,</div><div class="line"><span class="attr">beforeCompile</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'---beforeCompile---'</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data.msg);</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</div><div class="line">&#125;,</div><div class="line"><span class="attr">compiled</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'---compiled---'</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data.msg);</div><div class="line">    <span class="comment">// 此时指令已经生效，但是不确保插入到文档中</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</div><div class="line">&#125;,</div><div class="line"><span class="attr">ready</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'---ready---'</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data.msg);</div><div class="line">    <span class="comment">// 在编译结束后和$el第一次插入到文档中的时候</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))  <span class="comment">//这时可以从整个文档中获取到模板中的元素</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'--在ready钩子函数中销毁实例--'</span>)</div><div class="line">    <span class="keyword">this</span>.$destroy(<span class="literal">true</span>);</div><div class="line">&#125;,</div><div class="line"><span class="attr">beforeDestroy</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 在销毁实例时调用，所有功能都还保持</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'---beforeDestroy---'</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data.msg);</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</div><div class="line">&#125;,</div><div class="line"><span class="attr">destroyed</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//在实例被销毁之后调用。此时所有的绑定和实例的指令已经解绑，所有的子实例也已经被销毁。</span></div><div class="line">    <span class="comment">// 与挂载元素解除绑定</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'---destroyed---'</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data.msg);</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://ok3x4ia9b.bkt.clouddn.com/17-1-21/56048235-file_1484985260986_9fc2.jpg" alt="结果"></p>
<p>生命周期在组件开发总非常重要，尤其是能在适当的时机取得数据。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue.js学习]]></title>
      <url>http://djl.pub/2017/01/17/Vue-js%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>最近在慕课网上面买了一套<a href="http://coding.imooc.com/class/74.html" target="_blank" rel="external">高仿饿了么APP</a>视频,个人认为<br>对于我这种没有实际经验（还没有正式工作），又在学习Vue.js的人来说，绝对是非常值得的（不是打广告）。<br>而这套课程中主要用到了<strong>Vue</strong>、<strong>Vue-router</strong>、<strong>Vue-source</strong>、<strong>webpack</strong>、<strong>ES6</strong>、<strong>ESLint</strong>等等<br>所以通过这次课程我对于这些都有了一个大致了解。而这篇文章主要讲解Vue的1.0版本。我将会接下来的时间利用Vue2.0来实现一遍。<br><a id="more"></a></p>
<p><a href="http://v1-cn.vuejs.org/guide/" target="_blank" rel="external">官方文档</a></p>
<p>Vue.js的两大特性：组件化开发、数据驱动。之前没有学习任何框架的时候，开发过一个H5的音乐播放器，里面涉及<br>了大量DOM操作，实在很费神，如果使用Vue来做的话应该简单很多。由于Vue的官方文档已经写的比较好了而且又有中文版，<br>所以这里我并不打算讲Vue的一些基本知识（相比官方文档也讲不出什么花出来）</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><h2 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h2><h2 id="常见的用法"><a href="#常见的用法" class="headerlink" title="常见的用法"></a>常见的用法</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo初探---让写作飞起来]]></title>
      <url>http://djl.pub/2017/01/13/hexo%E5%88%9D%E6%8E%A2---%E8%AE%A9%E5%86%99%E4%BD%9C%E9%A3%9E%E8%B5%B7%E6%9D%A5/</url>
      <content type="html"><![CDATA[<p>这两天一直在捣鼓hexo，虽然不是很难，但是在搭建过程中，还是遇到了一些问题，导致花了两天。网上有很多相关教程，但是很多都含糊不清，其实让我豁然开朗的还是这篇文章，在此特别谢谢这位博主<a href="https://my.oschina.net/ryaneLee/blog/638440" target="_blank" rel="external">小白独立搭建博客–Github Pages和Hexo简明教程</a>。好了下面我们直接开始吧<br><a id="more"></a></p>
<h2 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h2><p><a href="https://git-scm.com/download" target="_blank" rel="external">Git</a>：版本控制器   </p>
<p><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="external">Node</a>：提供服务器端JavaScript开发环境</p>
<p><a href="https://github.com" target="_blank" rel="external">GitHub</a>：需注册一个账号</p>
<p>在这里只提供下载链接，安装过程基本就是下一步了。</p>
<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1 安装hexo"></a>1 安装hexo</h3><p>安装好上述工具后，我们开始安装hexo，首先打开git,鼠标右键–&gt;git bash here</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-970cfcfc5c4d9e07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Git_bash.png"></p>
<p>打开效果如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-f6d8b39d88552ff3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开Git.png"></p>
<p>然后执行下面的命令<br><code>$ npm install -g hexo-cli</code>，全局安装hexo的脚手架，安装以后我们就可以全局使用hexo这个命令了。安装成功后执行下面命令<code>hexo -v</code>，就可以看见如下效果。<br><img src="http://upload-images.jianshu.io/upload_images/1948637-f6c1ceeafe9de1d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hexo安装成功.png"></p>
<p>接着执行下面命令<code>npm install hexo --save</code></p>
<p>然后新建一个文件夹比如hexo，在该文件夹下打开Git(即Git bash here)，执行下面命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo init </div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>不出问题的话，该文件夹下面会新增这些文件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-a9604272a538c58f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hexo_init.png"></p>
<h3 id="3-安装hexo服务器"><a href="#3-安装hexo服务器" class="headerlink" title="3 安装hexo服务器"></a>3 安装hexo服务器</h3><p>Hexo 3.0 把服务器独立成了个别模块，您必须先安装 <a href="https://github.com/hexojs/hexo-server" target="_blank" rel="external">hexo-server</a> 才能使用。执行命令<code>$ npm install hexo-server --save</code>。这样安装好hexo服务器以后，我们就可以启动服务器了。执行命令<code>$ hexo server</code>，然后在浏览器输入网址<strong><a href="http://127.0.0.1:4000/" target="_blank" rel="external">http://127.0.0.1:4000/</a></strong>,就可以正常访问了。效果图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-762b47f41c85b29e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="本地效果.png">。</p>
<p>OK！现在本地已经没问题了，接下来就是要把它部署到远程服务器上了。</p>
<h3 id="3-建立GitHub-pages"><a href="#3-建立GitHub-pages" class="headerlink" title="3  建立GitHub pages"></a>3  建立GitHub pages</h3><p>新建一个github仓库</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-e9ad42417d0f33d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="new_repository.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-ac753802c8884e86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GitHub_pages建立.png"></p>
<p>这个仓库比较特殊，它要按照如下格式进行命名：你的GitHub用户昵称.github.io。新建好这个仓库后，见如下效果图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-82a49dd72ededad5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="djlxs.github.io.png"></p>
<p>然后点击settings选项，向下翻到Git Pages选项</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-84fbadde099f3129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="导入主题前Git_pages.png"></p>
<p>上面有一个提示信息</p>
<blockquote>
<p>GitHub Pages is currently disabled. You must first add content to your repository before you can publish a GitHub Pages site</p>
</blockquote>
<p>我们此时访问<a href="https://djlxs.github.io/" target="_blank" rel="external">https://djlxs.github.io/</a> 是会报404的，因为没有内容，我们可以点击下面的Choose a theme按钮，选择一个主题后，在访问<a href="https://djlxs.github.io/" target="_blank" rel="external">https://djlxs.github.io/</a> ，就可以了。此时看看GitHub Pages选项已经变成</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-ef566fc26d0cedcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择主题后.png"><br>上面有个提示信息</p>
<blockquote>
<p>Your GitHub Pages site is currently being built from the master<br> branch</p>
</blockquote>
<p>OK啦</p>
<h3 id="4-配置SSH公钥"><a href="#4-配置SSH公钥" class="headerlink" title="4 配置SSH公钥"></a>4 配置SSH公钥</h3><p>配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与Github代码库同步。操作如下：</p>
<p>第一步、看看是否存在SSH密钥(keys)<br>首先，我们需要看看是否看看本机是否存在SSH keys,打开Git Bash,并运行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cd ~/. ssh</div></pre></td></tr></table></figure>
<p>检查你本机用户home目录下是否存在.ssh目录<br>如果，不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。</p>
<p>第二步、创建一对新的SSH密钥(keys)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ssh-keygen -t rsa -C &quot;your_email@example.com&quot; #这将按照你提供的邮箱地址，创建一对密钥</div></pre></td></tr></table></figure>
<p>直接回车，则将密钥按默认文件进行存储。此时也可以输入特定的文件名，比如<code>/c/Users/you/.ssh/github_rsa</code><br>接着，根据提示，你需要输入密码和确认密码,在这里我们直接enter，不用输入密码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</div><div class="line">Enter same passphrase again: [Type passphrase again]</div></pre></td></tr></table></figure>
<p>输入完成之后，屏幕会显示如下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key </div><div class="line">has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint </div><div class="line">is:01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</div></pre></td></tr></table></figure>
<p>第三步、在GitHub账户中添加你的公钥<br>运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clip &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>
<p>接着：<br>登陆GitHub,进入你的Account Settings.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-2a9b043895299590.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="add_SSH_key.png"></p>
<p>第四步、测试<br>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>成功后你会看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi djlxs! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>
<p>第五步、设置用户信息<br>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。 Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;djlxs&quot;//用户名</div><div class="line">$ git config --global user.email &quot;djlxs@gmail.com&quot;//填写自己的邮箱</div></pre></td></tr></table></figure>
<h3 id="5-将本地文件同步至GitHub"><a href="#5-将本地文件同步至GitHub" class="headerlink" title="5 将本地文件同步至GitHub"></a>5 将本地文件同步至GitHub</h3><p><img src="http://upload-images.jianshu.io/upload_images/1948637-badcf3287146813f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="clone_https.png"></p>
<p>到新建的仓库下面复制HTTPS地址，然后打开本地hexo文件夹下的</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-53f92f31dd7c739c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="_config.jpg"></p>
<p>填入以下信息：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-d7c3768113ba4bc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="add_config.jpg"></p>
<p>然后在命令窗口执行下面命令,安装相关部署插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>安装完成后，执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>此时会让你输入GitHub的账号和密码，输入后在浏览器中输入 <a href="https://djlxs.github.io/" target="_blank" rel="external">https://djlxs.github.io/</a> 应该就可以访问了。</p>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>首先去<a href="https://hexo.io/themes/" target="_blank" rel="external">hexo皮肤网站</a>,选择一款进入它的GitHub地址然后将clone的文件移动到<strong>themes</strong>文件夹下。然后修改<strong>_config.yml</strong>文件中的theme为你所选择的主题的名称即可。然后执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo s</div></pre></td></tr></table></figure>
<p>现在本地看看主题皮肤是否已经更换过来，然后执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>同步至GitHub，刷新即可</p>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>首先在万网上购买自己的域名，然后进入管理界面</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-b4d8e0c05fc2fe50.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名解析.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-6ffad7b818b55492.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名解析内容.jpg"></p>
<p>然后在source文件夹下建立一个CNAME文件(没有后缀名)</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-db064d9b5ef4c125.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CNAME文件.jpg"><br>然后执行</p>
<p>CNAME:是提供别名解析，就是说可以从一个域名解析绑定到另一个域名。 例如：<code>http://djlxs.github.io</code>  解析绑定到 <code>http://djl.pub</code>。<br>其中主机记录<strong><em>www</em></strong>代表一个二级域名此时输入<code>http://www.djl.pub</code>是可以正常访问的。如果主机记录是<strong><em>@</em></strong>代表直接输入<code>http://djl.pub</code>是可以访问的<br>一般情况下这两种方式我们都会添加，所以你在浏览器地址栏中输入<code>http://djl.pub</code>和<code>http://www.djl.pub</code>跳到是同一个页面。</p>
<p>A:提供的是一种IP地址解析到你所买的域名的解析方式。例如：<code>151.101.24.133</code>  解析到 <code>djl.pub</code></p>
<p>在这里我用的是阿里云自带的DNS服务器，当然你也可以使用其他第三方DNS服务器。例如：<a href="https://www.dnspod.cn/" target="_blank" rel="external">dnspod</a>,添加解析记录的方式一样<br>但是这里要记得在你购买域名的网站上更改默认的DNS服务商，以下以万网（域名提供商）和dnspod（域名解析服务商）为例</p>
<p>首先进入控制台进入域名管理，找到相应域名点击<strong>管理</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-1dbf77201fec45d2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名管理控制台.jpg"></p>
<p>点击修<strong>改DNS</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-ea78ba366c068ee3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改DNS服务器.jpg"></p>
<p>将以下内容复制粘贴进下图的内容框中保存，即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f1g1ns1.dnspod.net</div><div class="line">f1g1ns2.dnspod.net</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-baad0040dbc4dae9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更改DNS服务器.jpg"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>同步至GitHub即可，至此hexo博客搭建基本就大功告成。下面推荐一个工具<a href="https://github.com/nihgwu/hexo-hey" target="_blank" rel="external">hexo-hey</a></p>
<p><a href="https://my.oschina.net/ryaneLee/blog/638440" target="_blank" rel="external">小白独立搭建博客–Github Pages和Hexo简明教程</a></p>
<p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">hexo中文文档</a></p>
<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p><img src="http://upload-images.jianshu.io/upload_images/1948637-f354427a1d5932cf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="问题01.jpg"></p>
<p>解决办法:<a href="https://segmentfault.com/q/1010000003734223" target="_blank" rel="external">参考链接</a>、<a href="https://github.com/hexojs/hexo/issues/1503" target="_blank" rel="external">参考链接</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>如果你只是想搭建一个自己的博客，绑定自己的域名写写文章，不想自己动手添加其他功能（评论、分享、搜索），那么选择<br>一款好的皮肤就很重要，因为有的皮肤早已经帮你集成好了，只需要动手简单的改改配置文件就行，在这里给大家推荐一款皮肤<br>可能样式有些过于花哨，不过这些都可以自己调，功能很全，文档也比较全。<a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">github地址</a></p>
<p>这是我在新的博客上面的第一篇文章，欢迎大家访问我的博客。<a href="http://djl.pub/">DJL箫氏</a></p>
]]></content>
    </entry>
    
  
  
</search>
