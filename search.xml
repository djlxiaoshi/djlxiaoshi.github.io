<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title></title>
      <url>http://djl.pub/2017/01/21/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h1 id="Vue学习之组件"><a href="#Vue学习之组件" class="headerlink" title="Vue学习之组件"></a>Vue学习之组件</h1><hr>
<p>title: hexo初探—让写作飞起来<br>date: 2017-01-13 14:49:57<br>tags: </p>
<pre><code>- Vue
- Vue组件
</code></pre><h2 id="categories-Vue"><a href="#categories-Vue" class="headerlink" title="categories: Vue"></a>categories: Vue</h2><p>组件在Vue中占有举足轻重的地位，在开发<em>高仿饿了么外卖APP</em>中也见识到了组件化开发的便捷和灵活。下面来总结一下。<br><a id="more"></a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://v1-cn.vuejs.org/guide/components.html" target="_blank" rel="external">官方Vue组件文档</a><br><a href="http://www.cnblogs.com/keepfool/p/5625583.html" target="_blank" rel="external">Vue.js——60分钟组件快速入门（上篇）</a><br><a href="http://www.cnblogs.com/keepfool/p/5637834.html" target="_blank" rel="external">Vue.js——60分钟组件快速入门（下篇）</a></p>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义</span></div><div class="line"><span class="keyword">var</span> MyComponent = Vue.extend(&#123;</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 注册</span></div><div class="line">Vue.component(<span class="string">'my-component'</span>, MyComponent)</div><div class="line"><span class="comment">// 创建根实例</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#example'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这个组件是全局注册。</p>
<h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><p>有时我们需要在一个父组件下面注册另一个子组件，而这个子组件只能被这个父组件使用，那么我们就需要使用局部注册。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Child = Vue.extend(&#123; <span class="comment">/* ... */</span> &#125;)</div><div class="line"><span class="keyword">var</span> Parent = Vue.extend(&#123;</div><div class="line">  <span class="attr">template</span>: <span class="string">'...'</span>,</div><div class="line">  <span class="attr">components</span>: &#123;</div><div class="line">    <span class="comment">// &lt;my-component&gt; 只能用在父组件模板内</span></div><div class="line">    <span class="string">'my-component'</span>: Child</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>可以看到就是在一个父组件中的<strong>components</strong>属性中添加子组件。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>在子组件中data属性值是一个匿名函数的返回值</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> MyComponent = Vue.extend(&#123;</div><div class="line">  <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>如果不这样，那么每个实例都将共享这一个data，就会造成混乱。</p>
<ol>
<li>我们在子组件模板时，既可以以下面这种方式指定</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyComponent = Vue.extend(&#123;</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>但是我们更推荐使用H5的template标签来做，尤其是在子组件模板比较大的时候<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmpl"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>这是一个组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> component = Vue.extend(&#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">"#tmpl"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>当然对子组件模板也有一些要求，不然会解析出错</p>
<blockquote>
<ul>
<li>a 不能包含其它的交互元素（如按钮，链接）</li>
<li>ul 和 ol 只能直接包含 li</li>
<li>select 只能包含 option 和 optgroup</li>
<li>table 只能直接包含 thead, tbody, tfoot, tr, caption, col,   colgroup</li>
<li>tr 只能直接包含 th 和 td </li>
</ul>
</blockquote>
<p> <a href="http://v1-cn.vuejs.org/guide/components.html#模板解析" target="_blank" rel="external">更多模板注意事项</a></p>
<h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><p>组件使用中最难的就是解决通信问题。一般有一下几种方式和情况</p>
<h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>第一种就是在子组件中利用props属性，来实现父子组件中的通信。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tmlp-a</span> <span class="attr">:props-num</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;/<span class="name">tmlp-a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmlp-a"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;propsNum&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'tmlp-a'</span>,&#123;</div><div class="line">    <span class="attr">template</span>:<span class="string">"#tmlp-a"</span>,</div><div class="line">    <span class="attr">props</span>:[<span class="string">'propsNum'</span>],</div><div class="line">    <span class="attr">methods</span>:&#123;</div><div class="line">        <span class="attr">add</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.propsNum++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>:<span class="string">"#wrap"</span>,</div><div class="line">    <span class="attr">data</span>:&#123;</div><div class="line">        <span class="attr">num</span>:<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>通过props这个属性我们就可以拿到父组件的data数据，然后我们就可以操作这个数据，但是这里是一个单项问题，即我们在子组件中操作这个数据，并不会影响父组件中对应的数据，当然有一个办法就是通过props传递过来的是一个引用类型数据而不是一个基本变量，但是这无疑很麻烦。那么Vue提供了另外一种方法，那就是通过<strong>.sync</strong>修饰符来做。把代码做一点修改即可：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tmlp-a</span> <span class="attr">:props-num.sync</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;/<span class="name">tmlp-a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Vue-dispatch"><a href="#Vue-dispatch" class="headerlink" title="Vue.$dispatch"></a>Vue.$dispatch</h2><p>第二种方式就是使用Vue.$dispatch（事件配发）来做，这种用法主要用在两个平级的子组件之间，它们有共同的父组件。也就是来解决兄弟组件间的通信问题，因为在一般情况下是不直接通信的（为了组件的独立性），那么有时候我们又有这样的需求。首先来看看通信的流程图：</p>
<p><img src="http://ok3x4ia9b.bkt.clouddn.com/17-1-21/79403842-file_1485003651843_8299.jpg" alt="dispatch原理图"></p>
<p>上面的通信方式，就如下面的对话。</p>
<blockquote>
<p>大儿子小明：老爸，让弟弟帮我拿一下快递，快递号码为（3737） //派发事件并传递参数3737<br>老爸听到了大儿子的请求，并开始行动 //父组件事件响应函数做出响应<br>老爸跑去找小儿子小明 //v-ref指令找到另一个子组件<br>爸爸：小华，快去拿一个快递，快递号码为（3737）<br>小儿子小明腾腾腾就去拿快递，告诉别人快递号码。</p>
</blockquote>
<p>代码示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">child-a</span> &gt;</span><span class="tag">&lt;/<span class="name">child-a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">child-b</span>  <span class="attr">v-ref:other-child</span>&gt;</span><span class="tag">&lt;/<span class="name">child-b</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"child-a"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sendMsg"</span>&gt;</span>发送信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"child-b"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;receiveMsg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#container'</span>,</div><div class="line">    <span class="attr">components</span>: &#123;</div><div class="line">        <span class="string">'childA'</span>: &#123;</div><div class="line">            <span class="attr">template</span>: <span class="string">'#child-a'</span>,</div><div class="line">            <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    <span class="attr">msg</span>:<span class="string">'DJL箫氏'</span></div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">methods</span>: &#123;</div><div class="line">                <span class="attr">sendMsg</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">this</span>.$dispatch(<span class="string">'fatherTodo'</span>,<span class="keyword">this</span>.msg);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'childB'</span>: &#123;</div><div class="line">            <span class="attr">template</span>: <span class="string">'#child-b'</span>,</div><div class="line">            <span class="attr">data</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">              <span class="keyword">return</span> &#123;</div><div class="line">                  <span class="attr">receiveMsg</span>:<span class="string">''</span></div><div class="line">              &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">methods</span>: &#123;</div><div class="line">                <span class="attr">receiveMsgFromA</span>: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">                    <span class="keyword">this</span>.receiveMsg = msg;</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">'我接受到来自A的数据：'</span>+msg);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">events</span>: &#123;</div><div class="line">        <span class="attr">fatherTodo</span>: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.$refs.childB.receiveMsgFromA(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这样就可以在兄弟组件实现通信</p>
<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>最后一种方式就是利用<a href="https://github.com/vuejs/vuex/tree/1.0/docs/zh-cn" target="_blank" rel="external">Vuex</a>,关于这种方法，我会专门花一篇来写，敬请期待。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue学习之生命周期]]></title>
      <url>http://djl.pub/2017/01/21/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<p>生命周期在组件开发总非常重要，尤其是能在适当的时机取得数据,做一些初始化准备。下面我们来简单的聊聊Vue生命周期。<br><a id="more"></a><br>这里首先来看看Vue官方文档给出的生命周期示意图。</p>
<p><img src="http://ok3x4ia9b.bkt.clouddn.com/17-1-21/75404643-file_1484986273994_1820a.png" alt="Vue生命周期"></p>
<p>在这里我主要讨论init、created、beforeCompile、compiled、ready、beforeDestroy、destroyed这几个生命周期钩子函数。</p>
<p>init：在实例开始初始化时同步调用。此时数据观测、事件和 watcher 都尚未初始化。也是说在这里this.$el和this.$data都是拿不到的。</p>
<p>created:在实例创建之后同步调用。此时实例已经结束解析选项，这意味着已建立：数据绑定，计算属性，方法，watcher/事件回调。但是还没有开始 DOM 编译，$el还不存在。也就是在这里已经可以访问this.$data了了。但是此时还没有进行模板编译。</p>
<p>beforeCompile：编译模板前，$el已经存在了。</p>
<p>compiled：模板编译完成，此时Vue指令已经生效，但是不能保证此时已经插入到文档中。</p>
<p>ready：在编译结束后和$el第一次插入到文档中的时候。这时可以从整个文档中获取到模板中的元素。</p>
<p>beforeDestroy：在销毁实例时调用，所有功能都还保持。</p>
<p>destroyed：在实例被销毁之后调用。此时所有的绑定和实例的指令已经解绑，所有的子实例也已经被销毁。如果有离开过渡，destroyed 钩子在过渡完成之后调用。与挂载元素解除绑定</p>
<p>代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'-----init----'</span>)</div><div class="line">    <span class="comment">//  也就是说在这里$el获取不到，数据观测也没有建立，事件绑定等等都没有完成  实例初始化时同步调用</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data.msg);</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</div><div class="line">&#125;,</div><div class="line"><span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 这里$el依然获取不到，但是数据观测已经建立，也就是说可以获得数据了，但是依然没有开始编译，也就是说Vue</span></div><div class="line">    <span class="comment">// 的一些指令是不起作用的</span></div><div class="line">    <span class="comment">// 实例创建后同步调用</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'----created---'</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data.msg);</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</div><div class="line">&#125;,</div><div class="line"><span class="attr">beforeCompile</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'---beforeCompile---'</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data.msg);</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</div><div class="line">&#125;,</div><div class="line"><span class="attr">compiled</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'---compiled---'</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data.msg);</div><div class="line">    <span class="comment">// 此时指令已经生效，但是不确保插入到文档中</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</div><div class="line">&#125;,</div><div class="line"><span class="attr">ready</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'---ready---'</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data.msg);</div><div class="line">    <span class="comment">// 在编译结束后和$el第一次插入到文档中的时候</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))  <span class="comment">//这时可以从整个文档中获取到模板中的元素</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'--在ready钩子函数中销毁实例--'</span>)</div><div class="line">    <span class="keyword">this</span>.$destroy(<span class="literal">true</span>);</div><div class="line">&#125;,</div><div class="line"><span class="attr">beforeDestroy</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 在销毁实例时调用，所有功能都还保持</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'---beforeDestroy---'</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data.msg);</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</div><div class="line">&#125;,</div><div class="line"><span class="attr">destroyed</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//在实例被销毁之后调用。此时所有的绑定和实例的指令已经解绑，所有的子实例也已经被销毁。</span></div><div class="line">    <span class="comment">// 与挂载元素解除绑定</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'---destroyed---'</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data.msg);</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>生命周期在组件开发总非常重要，尤其是能在适当的时机取得数据。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue.js学习]]></title>
      <url>http://djl.pub/2017/01/17/Vue-js%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>最近在慕课网上面买了一套<a href="http://coding.imooc.com/class/74.html" target="_blank" rel="external">高仿饿了么APP</a>视频,个人认为<br>对于我这种没有实际经验（还没有正式工作），又在学习Vue.js的人来说，绝对是非常值得的（不是打广告）。<br>而这套课程中主要用到了<strong>Vue</strong>、<strong>Vue-router</strong>、<strong>Vue-source</strong>、<strong>webpack</strong>、<strong>ES6</strong>、<strong>ESLint</strong>等等<br>所以通过这次课程我对于这些都有了一个大致了解。而这篇文章主要讲解Vue的1.0版本。我将会接下来的时间利用Vue2.0来实现一遍。<br><a id="more"></a></p>
<p><a href="http://v1-cn.vuejs.org/guide/" target="_blank" rel="external">官方文档</a></p>
<p>Vue.js的两大特性：组件化开发、数据驱动。之前没有学习任何框架的时候，开发过一个H5的音乐播放器，里面涉及<br>了大量DOM操作，实在很费神，如果使用Vue来做的话应该简单很多。由于Vue的官方文档已经写的比较好了而且又有中文版，<br>所以这里我并不打算讲Vue的一些基本知识（相比官方文档也讲不出什么花出来）</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><h2 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h2><h2 id="常见的用法"><a href="#常见的用法" class="headerlink" title="常见的用法"></a>常见的用法</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo初探---让写作飞起来]]></title>
      <url>http://djl.pub/2017/01/13/hexo%E5%88%9D%E6%8E%A2---%E8%AE%A9%E5%86%99%E4%BD%9C%E9%A3%9E%E8%B5%B7%E6%9D%A5/</url>
      <content type="html"><![CDATA[<p>这两天一直在捣鼓hexo，虽然不是很难，但是在搭建过程中，还是遇到了一些问题，导致花了两天。网上有很多相关教程，但是很多都含糊不清，其实让我豁然开朗的还是这篇文章，在此特别谢谢这位博主<a href="https://my.oschina.net/ryaneLee/blog/638440" target="_blank" rel="external">小白独立搭建博客–Github Pages和Hexo简明教程</a>。好了下面我们直接开始吧<br><a id="more"></a></p>
<h2 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h2><p><a href="https://git-scm.com/download" target="_blank" rel="external">Git</a>：版本控制器   </p>
<p><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="external">Node</a>：提供服务器端JavaScript开发环境</p>
<p><a href="https://github.com" target="_blank" rel="external">GitHub</a>：需注册一个账号</p>
<p>在这里只提供下载链接，安装过程基本就是下一步了。</p>
<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1 安装hexo"></a>1 安装hexo</h3><p>安装好上述工具后，我们开始安装hexo，首先打开git,鼠标右键–&gt;git bash here</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-970cfcfc5c4d9e07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Git_bash.png"></p>
<p>打开效果如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-f6d8b39d88552ff3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开Git.png"></p>
<p>然后执行下面的命令<br><code>$ npm install -g hexo-cli</code>，全局安装hexo的脚手架，安装以后我们就可以全局使用hexo这个命令了。安装成功后执行下面命令<code>hexo -v</code>，就可以看见如下效果。<br><img src="http://upload-images.jianshu.io/upload_images/1948637-f6c1ceeafe9de1d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hexo安装成功.png"></p>
<p>接着执行下面命令<code>npm install hexo --save</code></p>
<p>然后新建一个文件夹比如hexo，在该文件夹下打开Git(即Git bash here)，执行下面命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo init </div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>不出问题的话，该文件夹下面会新增这些文件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-a9604272a538c58f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hexo_init.png"></p>
<h3 id="3-安装hexo服务器"><a href="#3-安装hexo服务器" class="headerlink" title="3 安装hexo服务器"></a>3 安装hexo服务器</h3><p>Hexo 3.0 把服务器独立成了个别模块，您必须先安装 <a href="https://github.com/hexojs/hexo-server" target="_blank" rel="external">hexo-server</a> 才能使用。执行命令<code>$ npm install hexo-server --save</code>。这样安装好hexo服务器以后，我们就可以启动服务器了。执行命令<code>$ hexo server</code>，然后在浏览器输入网址<strong><a href="http://127.0.0.1:4000/" target="_blank" rel="external">http://127.0.0.1:4000/</a></strong>,就可以正常访问了。效果图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-762b47f41c85b29e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="本地效果.png">。</p>
<p>OK！现在本地已经没问题了，接下来就是要把它部署到远程服务器上了。</p>
<h3 id="3-建立GitHub-pages"><a href="#3-建立GitHub-pages" class="headerlink" title="3  建立GitHub pages"></a>3  建立GitHub pages</h3><p>新建一个github仓库</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-e9ad42417d0f33d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="new_repository.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-ac753802c8884e86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GitHub_pages建立.png"></p>
<p>这个仓库比较特殊，它要按照如下格式进行命名：你的GitHub用户昵称.github.io。新建好这个仓库后，见如下效果图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-82a49dd72ededad5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="djlxs.github.io.png"></p>
<p>然后点击settings选项，向下翻到Git Pages选项</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-84fbadde099f3129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="导入主题前Git_pages.png"></p>
<p>上面有一个提示信息</p>
<blockquote>
<p>GitHub Pages is currently disabled. You must first add content to your repository before you can publish a GitHub Pages site</p>
</blockquote>
<p>我们此时访问<a href="https://djlxs.github.io/" target="_blank" rel="external">https://djlxs.github.io/</a> 是会报404的，因为没有内容，我们可以点击下面的Choose a theme按钮，选择一个主题后，在访问<a href="https://djlxs.github.io/" target="_blank" rel="external">https://djlxs.github.io/</a> ，就可以了。此时看看GitHub Pages选项已经变成</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-ef566fc26d0cedcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择主题后.png"><br>上面有个提示信息</p>
<blockquote>
<p>Your GitHub Pages site is currently being built from the master<br> branch</p>
</blockquote>
<p>OK啦</p>
<h3 id="4-配置SSH公钥"><a href="#4-配置SSH公钥" class="headerlink" title="4 配置SSH公钥"></a>4 配置SSH公钥</h3><p>配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与Github代码库同步。操作如下：</p>
<p>第一步、看看是否存在SSH密钥(keys)<br>首先，我们需要看看是否看看本机是否存在SSH keys,打开Git Bash,并运行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cd ~/. ssh</div></pre></td></tr></table></figure>
<p>检查你本机用户home目录下是否存在.ssh目录<br>如果，不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。</p>
<p>第二步、创建一对新的SSH密钥(keys)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ssh-keygen -t rsa -C &quot;your_email@example.com&quot; #这将按照你提供的邮箱地址，创建一对密钥</div></pre></td></tr></table></figure>
<p>直接回车，则将密钥按默认文件进行存储。此时也可以输入特定的文件名，比如<code>/c/Users/you/.ssh/github_rsa</code><br>接着，根据提示，你需要输入密码和确认密码,在这里我们直接enter，不用输入密码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</div><div class="line">Enter same passphrase again: [Type passphrase again]</div></pre></td></tr></table></figure>
<p>输入完成之后，屏幕会显示如下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key </div><div class="line">has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint </div><div class="line">is:01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</div></pre></td></tr></table></figure>
<p>第三步、在GitHub账户中添加你的公钥<br>运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clip &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>
<p>接着：<br>登陆GitHub,进入你的Account Settings.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-2a9b043895299590.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="add_SSH_key.png"></p>
<p>第四步、测试<br>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>成功后你会看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi djlxs! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>
<p>第五步、设置用户信息<br>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。 Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;djlxs&quot;//用户名</div><div class="line">$ git config --global user.email &quot;djlxs@gmail.com&quot;//填写自己的邮箱</div></pre></td></tr></table></figure>
<h3 id="5-将本地文件同步至GitHub"><a href="#5-将本地文件同步至GitHub" class="headerlink" title="5 将本地文件同步至GitHub"></a>5 将本地文件同步至GitHub</h3><p><img src="http://upload-images.jianshu.io/upload_images/1948637-badcf3287146813f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="clone_https.png"></p>
<p>到新建的仓库下面复制HTTPS地址，然后打开本地hexo文件夹下的</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-53f92f31dd7c739c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="_config.jpg"></p>
<p>填入以下信息：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-d7c3768113ba4bc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="add_config.jpg"></p>
<p>然后在命令窗口执行下面命令,安装相关部署插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>安装完成后，执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>此时会让你输入GitHub的账号和密码，输入后在浏览器中输入 <a href="https://djlxs.github.io/" target="_blank" rel="external">https://djlxs.github.io/</a> 应该就可以访问了。</p>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>首先去<a href="https://hexo.io/themes/" target="_blank" rel="external">hexo皮肤网站</a>,选择一款进入它的GitHub地址然后将clone的文件移动到<strong>themes</strong>文件夹下。然后修改<strong>_config.yml</strong>文件中的theme为你所选择的主题的名称即可。然后执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo s</div></pre></td></tr></table></figure>
<p>现在本地看看主题皮肤是否已经更换过来，然后执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>同步至GitHub，刷新即可</p>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>首先在万网上购买自己的域名，然后进入管理界面</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-b4d8e0c05fc2fe50.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名解析.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-6ffad7b818b55492.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名解析内容.jpg"></p>
<p>然后在source文件夹下建立一个CNAME文件(没有后缀名)</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-db064d9b5ef4c125.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CNAME文件.jpg"><br>然后执行</p>
<p>CNAME:是提供别名解析，就是说可以从一个域名解析绑定到另一个域名。 例如：<code>http://djlxs.github.io</code>  解析绑定到 <code>http://djl.pub</code>。<br>其中主机记录<strong><em>www</em></strong>代表一个二级域名此时输入<code>http://www.djl.pub</code>是可以正常访问的。如果主机记录是<strong><em>@</em></strong>代表直接输入<code>http://djl.pub</code>是可以访问的<br>一般情况下这两种方式我们都会添加，所以你在浏览器地址栏中输入<code>http://djl.pub</code>和<code>http://www.djl.pub</code>跳到是同一个页面。</p>
<p>A:提供的是一种IP地址解析到你所买的域名的解析方式。例如：<code>151.101.24.133</code>  解析到 <code>djl.pub</code></p>
<p>在这里我用的是阿里云自带的DNS服务器，当然你也可以使用其他第三方DNS服务器。例如：<a href="https://www.dnspod.cn/" target="_blank" rel="external">dnspod</a>,添加解析记录的方式一样<br>但是这里要记得在你购买域名的网站上更改默认的DNS服务商，以下以万网（域名提供商）和dnspod（域名解析服务商）为例</p>
<p>首先进入控制台进入域名管理，找到相应域名点击<strong>管理</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-1dbf77201fec45d2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名管理控制台.jpg"></p>
<p>点击修<strong>改DNS</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-ea78ba366c068ee3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改DNS服务器.jpg"></p>
<p>将以下内容复制粘贴进下图的内容框中保存，即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f1g1ns1.dnspod.net</div><div class="line">f1g1ns2.dnspod.net</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1948637-baad0040dbc4dae9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更改DNS服务器.jpg"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>同步至GitHub即可，至此hexo博客搭建基本就大功告成。下面推荐一个工具<a href="https://github.com/nihgwu/hexo-hey" target="_blank" rel="external">hexo-hey</a></p>
<p><a href="https://my.oschina.net/ryaneLee/blog/638440" target="_blank" rel="external">小白独立搭建博客–Github Pages和Hexo简明教程</a></p>
<p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">hexo中文文档</a></p>
<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p><img src="http://upload-images.jianshu.io/upload_images/1948637-f354427a1d5932cf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="问题01.jpg"></p>
<p>解决办法:<a href="https://segmentfault.com/q/1010000003734223" target="_blank" rel="external">参考链接</a>、<a href="https://github.com/hexojs/hexo/issues/1503" target="_blank" rel="external">参考链接</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>如果你只是想搭建一个自己的博客，绑定自己的域名写写文章，不想自己动手添加其他功能（评论、分享、搜索），那么选择<br>一款好的皮肤就很重要，因为有的皮肤早已经帮你集成好了，只需要动手简单的改改配置文件就行，在这里给大家推荐一款皮肤<br>可能样式有些过于花哨，不过这些都可以自己调，功能很全，文档也比较全。<a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">github地址</a></p>
<p>这是我在新的博客上面的第一篇文章，欢迎大家访问我的博客。<a href="http://djl.pub/">DJL箫氏</a></p>
]]></content>
    </entry>
    
  
  
</search>
